// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/active_user.dart';
import 'models/all_transaction.dart';
import 'models/categories_model.dart';
import 'models/group_model.dart';
import 'models/group_transaction.dart';
import 'models/transactions.dart';
import 'models/user_contacts_object_box.dart';
import 'models/user_group_entity.dart';
import 'models/users.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 9014411570111907955),
      name: 'AllTransactionObjectBox',
      lastPropertyId: const IdUid(11, 162053737821741152),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8694849825752351767),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3207151240405492489),
            name: 'smsBody',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1842903812456401756),
            name: 'transactionType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 723644703456395646),
            name: 'amount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2124546283292894954),
            name: 'profilePic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2751514540086903714),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8332230877262284463),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4112056774116333606),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3350798163736211209),
            name: 'transactionIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 664475957156188469),
            relationTarget: 'TransactionsModel'),
        ModelProperty(
            id: const IdUid(11, 162053737821741152),
            name: 'groupTransactionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 4030362011929345513),
            relationTarget: 'GroupTransaction')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 269674673839424468),
      name: 'CategoriesModel',
      lastPropertyId: const IdUid(4, 782954922115444089),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5442585432304472394),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8061342150250607953),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6107051017084282340),
            name: 'serverId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 782954922115444089),
            name: 'lastAccessed',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3177243485848022627),
      name: 'TransactionsModel',
      lastPropertyId: const IdUid(15, 5609625620169636187),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4178897595303420459),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6663392215386776181),
            name: 'tr_user_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3309737436441329800),
            name: 'lane_user_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8142533641401511978),
            name: 'dane_user_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5853257937774260618),
            name: 'amount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5768525595371653184),
            name: 'paymentStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7285451265926841690),
            name: 'confirmation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 724294892062863934),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 354428659831795317),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6721690608834836789),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6556563116408547612),
            relationTarget: 'Users'),
        ModelProperty(
            id: const IdUid(11, 2034381242721380499),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 7927605428804504445),
            relationTarget: 'CategoriesModel'),
        ModelProperty(
            id: const IdUid(12, 9128980650143172858),
            name: 'serverId',
            type: 6,
            flags: 40,
            indexId: const IdUid(3, 821670535853634448)),
        ModelProperty(
            id: const IdUid(13, 7437663347410843091),
            name: 'dueDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6636932244260921004),
            name: 'settleTransactionId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5609625620169636187),
            name: 'groupTransactionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 7645075528197780165),
            relationTarget: 'GroupTransaction')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5836071551046790300),
      name: 'UserContactsObjectBoxModel',
      lastPropertyId: const IdUid(4, 3741109464537824837),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5364391057749955447),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3783421708457145288),
            name: 'contact_user_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7539236448329503699),
            name: 'user_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3741109464537824837),
            name: 'contact_name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 129236335080737937),
            name: 'users',
            targetId: const IdUid(5, 6538879905891172055))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 6538879905891172055),
      name: 'Users',
      lastPropertyId: const IdUid(8, 620411419702399046),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4858754684221210754),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2514246609599446728),
            name: 'onboarded_at',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5368262212715258426),
            name: 'full_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8604996204012924616),
            name: 'phone_no',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 46228027484990514),
            name: 'serverId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 314972893766492251),
            name: 'onBoardedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 620411419702399046),
            name: 'tapCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 195456692265290207),
      name: 'ActiveUser',
      lastPropertyId: const IdUid(3, 8561929024421698336),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 471667801033313339),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2295617034997660756),
            name: 'lastActivityTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8561929024421698336),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 1328607436252484972),
            relationTarget: 'Users')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 915627882401325649),
      name: 'Groups',
      lastPropertyId: const IdUid(7, 7817784271987254323),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8777015837182020667),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2405924301934533820),
            name: 'serverId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4227701971927236588),
            name: 'groupName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5732006824622431928),
            name: 'groupProfilePic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1244493461976427625),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7817784271987254323),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 261190079532569402),
            name: 'participants',
            targetId: const IdUid(5, 6538879905891172055))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 7796439595018486606),
      name: 'GroupTransaction',
      lastPropertyId: const IdUid(8, 4333855352936426617),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2759749476865211592),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3794865929091987418),
            name: 'serverId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 716397318274472860),
            name: 'amount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1334011980262774194),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 7796750743089600805),
            relationTarget: 'Groups'),
        ModelProperty(
            id: const IdUid(5, 2095656104156114306),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 155658549737684405),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3503705716261000374),
            name: 'creatorId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4333855352936426617),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 5804670537624951989),
            relationTarget: 'CategoriesModel')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 3169596549123498440),
            name: 'transactionParticipants',
            targetId: const IdUid(5, 6538879905891172055))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5881829362097578180),
      name: 'UserGroupEntity',
      lastPropertyId: const IdUid(9, 1705317028384425261),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6453703020289644396),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2603939301832300207),
            name: 'entityId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 976944863661928404),
            name: 'lastActivityTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5942762974654505405),
            name: 'profilePicture',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7734836596680813527),
            name: 'amount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1689875893210916637),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6367663110444810849),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 746338946739567063),
            name: 'dbType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1705317028384425261),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(9, 5881829362097578180),
      lastIndexId: const IdUid(9, 5804670537624951989),
      lastRelationId: const IdUid(3, 3169596549123498440),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7767128321014396191,
        1089521471164338571,
        8539785542320577863
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AllTransactionObjectBox: EntityDefinition<AllTransactionObjectBox>(
        model: _entities[0],
        toOneRelations: (AllTransactionObjectBox object) =>
            [object.transactionId, object.groupTransaction],
        toManyRelations: (AllTransactionObjectBox object) => {},
        getId: (AllTransactionObjectBox object) => object.id,
        setId: (AllTransactionObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (AllTransactionObjectBox object, fb.Builder fbb) {
          final smsBodyOffset =
              object.smsBody == null ? null : fbb.writeString(object.smsBody!);
          final transactionTypeOffset = fbb.writeString(object.transactionType);
          final amountOffset = fbb.writeString(object.amount);
          final profilePicOffset = object.profilePic == null
              ? null
              : fbb.writeString(object.profilePic!);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(12);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, smsBodyOffset);
          fbb.addOffset(2, transactionTypeOffset);
          fbb.addOffset(3, amountOffset);
          fbb.addOffset(4, profilePicOffset);
          fbb.addOffset(5, nameOffset);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.transactionId.targetId);
          fbb.addInt64(10, object.groupTransaction.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = AllTransactionObjectBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              smsBody: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              transactionType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              amount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              profilePic: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              updatedAt: updatedAtValue == null ? null : DateTime.fromMillisecondsSinceEpoch(updatedAtValue));
          object.transactionId.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.transactionId.attach(store);
          object.groupTransaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.groupTransaction.attach(store);
          return object;
        }),
    CategoriesModel: EntityDefinition<CategoriesModel>(
        model: _entities[1],
        toOneRelations: (CategoriesModel object) => [],
        toManyRelations: (CategoriesModel object) => {},
        getId: (CategoriesModel object) => object.id,
        setId: (CategoriesModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoriesModel object, fb.Builder fbb) {
          final messageOffset = fbb.writeString(object.message);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, messageOffset);
          fbb.addInt64(2, object.serverId);
          fbb.addInt64(3, object.lastAccessed.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CategoriesModel(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              serverId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              lastAccessed: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    TransactionsModel: EntityDefinition<TransactionsModel>(
        model: _entities[2],
        toOneRelations: (TransactionsModel object) =>
            [object.user, object.category, object.groupTransaction],
        toManyRelations: (TransactionsModel object) => {},
        getId: (TransactionsModel object) => object.id,
        setId: (TransactionsModel object, int id) {
          object.id = id;
        },
        objectToFB: (TransactionsModel object, fb.Builder fbb) {
          final amountOffset = fbb.writeString(object.amount);
          final paymentStatusOffset = fbb.writeString(object.paymentStatus);
          final confirmationOffset = object.confirmation == null
              ? null
              : fbb.writeString(object.confirmation!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.tr_user_id);
          fbb.addInt64(2, object.lane_user_id);
          fbb.addInt64(3, object.dane_user_id);
          fbb.addOffset(4, amountOffset);
          fbb.addOffset(5, paymentStatusOffset);
          fbb.addOffset(6, confirmationOffset);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.user.targetId);
          fbb.addInt64(10, object.category.targetId);
          fbb.addInt64(11, object.serverId);
          fbb.addInt64(12, object.dueDate?.millisecondsSinceEpoch);
          fbb.addInt64(13, object.settleTransactionId);
          fbb.addInt64(14, object.groupTransaction.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final dueDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = TransactionsModel(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              serverId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              tr_user_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              lane_user_id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              dane_user_id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              amount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              paymentStatus: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              confirmation: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              dueDate: dueDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dueDateValue),
              updatedAt: updatedAtValue == null ? null : DateTime.fromMillisecondsSinceEpoch(updatedAtValue),
              settleTransactionId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.user.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.category.attach(store);
          object.groupTransaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.groupTransaction.attach(store);
          return object;
        }),
    UserContactsObjectBoxModel: EntityDefinition<UserContactsObjectBoxModel>(
        model: _entities[3],
        toOneRelations: (UserContactsObjectBoxModel object) => [],
        toManyRelations: (UserContactsObjectBoxModel object) => {
              RelInfo<UserContactsObjectBoxModel>.toMany(1, object.id!):
                  object.users
            },
        getId: (UserContactsObjectBoxModel object) => object.id,
        setId: (UserContactsObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserContactsObjectBoxModel object, fb.Builder fbb) {
          final contact_nameOffset = fbb.writeString(object.contact_name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.contact_user_id);
          fbb.addInt64(2, object.user_id);
          fbb.addOffset(3, contact_nameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserContactsObjectBoxModel(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              contact_user_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              user_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              contact_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          InternalToManyAccess.setRelInfo<UserContactsObjectBoxModel>(
              object.users,
              store,
              RelInfo<UserContactsObjectBoxModel>.toMany(1, object.id!));
          return object;
        }),
    Users: EntityDefinition<Users>(
        model: _entities[4],
        toOneRelations: (Users object) => [],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final full_nameOffset = object.full_name == null
              ? null
              : fbb.writeString(object.full_name!);
          final phone_noOffset = fbb.writeString(object.phone_no);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.onboarded_at);
          fbb.addOffset(2, full_nameOffset);
          fbb.addOffset(3, phone_noOffset);
          fbb.addInt64(4, object.serverId);
          fbb.addInt64(6, object.onBoardedAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.tapCount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              serverId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              phone_no: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              onBoardedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              tapCount:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              full_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..onboarded_at =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    ActiveUser: EntityDefinition<ActiveUser>(
        model: _entities[5],
        toOneRelations: (ActiveUser object) => [object.user],
        toManyRelations: (ActiveUser object) => {},
        getId: (ActiveUser object) => object.id,
        setId: (ActiveUser object, int id) {
          object.id = id;
        },
        objectToFB: (ActiveUser object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastActivityTime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ActiveUser(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              lastActivityTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              user: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)));
          object.user.attach(store);
          return object;
        }),
    Groups: EntityDefinition<Groups>(
        model: _entities[6],
        toOneRelations: (Groups object) => [],
        toManyRelations: (Groups object) =>
            {RelInfo<Groups>.toMany(2, object.id): object.participants},
        getId: (Groups object) => object.id,
        setId: (Groups object, int id) {
          object.id = id;
        },
        objectToFB: (Groups object, fb.Builder fbb) {
          final groupNameOffset = fbb.writeString(object.groupName);
          final groupProfilePicOffset = fbb.writeString(object.groupProfilePic);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.serverId);
          fbb.addOffset(2, groupNameOffset);
          fbb.addOffset(3, groupProfilePicOffset);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Groups(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              groupName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              groupProfilePic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)));
          InternalToManyAccess.setRelInfo<Groups>(
              object.participants, store, RelInfo<Groups>.toMany(2, object.id));
          return object;
        }),
    GroupTransaction: EntityDefinition<GroupTransaction>(
        model: _entities[7],
        toOneRelations: (GroupTransaction object) =>
            [object.group, object.category],
        toManyRelations: (GroupTransaction object) => {
              RelInfo<GroupTransaction>.toMany(3, object.id):
                  object.transactionParticipants
            },
        getId: (GroupTransaction object) => object.id,
        setId: (GroupTransaction object, int id) {
          object.id = id;
        },
        objectToFB: (GroupTransaction object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.serverId);
          fbb.addInt64(2, object.amount);
          fbb.addInt64(3, object.group.targetId);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.creatorId);
          fbb.addInt64(7, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GroupTransaction(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              creatorId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              amount:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              group: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              category: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 18, 0)));
          object.group.attach(store);
          object.category.attach(store);
          InternalToManyAccess.setRelInfo<GroupTransaction>(
              object.transactionParticipants,
              store,
              RelInfo<GroupTransaction>.toMany(3, object.id));
          return object;
        }),
    UserGroupEntity: EntityDefinition<UserGroupEntity>(
        model: _entities[8],
        toOneRelations: (UserGroupEntity object) => [],
        toManyRelations: (UserGroupEntity object) => {},
        getId: (UserGroupEntity object) => object.id,
        setId: (UserGroupEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserGroupEntity object, fb.Builder fbb) {
          final profilePictureOffset = object.profilePicture == null
              ? null
              : fbb.writeString(object.profilePicture!);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.entityId);
          fbb.addInt64(2, object.lastActivityTime.millisecondsSinceEpoch);
          fbb.addOffset(3, profilePictureOffset);
          fbb.addInt64(4, object.amount);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.dbType);
          fbb.addOffset(8, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserGroupEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              entityId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              amount:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              lastActivityTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              profilePicture: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)))
            ..dbType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AllTransactionObjectBox] entity fields to define ObjectBox queries.
class AllTransactionObjectBox_ {
  /// see [AllTransactionObjectBox.id]
  static final id =
      QueryIntegerProperty<AllTransactionObjectBox>(_entities[0].properties[0]);

  /// see [AllTransactionObjectBox.smsBody]
  static final smsBody =
      QueryStringProperty<AllTransactionObjectBox>(_entities[0].properties[1]);

  /// see [AllTransactionObjectBox.transactionType]
  static final transactionType =
      QueryStringProperty<AllTransactionObjectBox>(_entities[0].properties[2]);

  /// see [AllTransactionObjectBox.amount]
  static final amount =
      QueryStringProperty<AllTransactionObjectBox>(_entities[0].properties[3]);

  /// see [AllTransactionObjectBox.profilePic]
  static final profilePic =
      QueryStringProperty<AllTransactionObjectBox>(_entities[0].properties[4]);

  /// see [AllTransactionObjectBox.name]
  static final name =
      QueryStringProperty<AllTransactionObjectBox>(_entities[0].properties[5]);

  /// see [AllTransactionObjectBox.createdAt]
  static final createdAt =
      QueryIntegerProperty<AllTransactionObjectBox>(_entities[0].properties[6]);

  /// see [AllTransactionObjectBox.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<AllTransactionObjectBox>(_entities[0].properties[7]);

  /// see [AllTransactionObjectBox.transactionId]
  static final transactionId =
      QueryRelationToOne<AllTransactionObjectBox, TransactionsModel>(
          _entities[0].properties[8]);

  /// see [AllTransactionObjectBox.groupTransaction]
  static final groupTransaction =
      QueryRelationToOne<AllTransactionObjectBox, GroupTransaction>(
          _entities[0].properties[9]);
}

/// [CategoriesModel] entity fields to define ObjectBox queries.
class CategoriesModel_ {
  /// see [CategoriesModel.id]
  static final id =
      QueryIntegerProperty<CategoriesModel>(_entities[1].properties[0]);

  /// see [CategoriesModel.message]
  static final message =
      QueryStringProperty<CategoriesModel>(_entities[1].properties[1]);

  /// see [CategoriesModel.serverId]
  static final serverId =
      QueryIntegerProperty<CategoriesModel>(_entities[1].properties[2]);

  /// see [CategoriesModel.lastAccessed]
  static final lastAccessed =
      QueryIntegerProperty<CategoriesModel>(_entities[1].properties[3]);
}

/// [TransactionsModel] entity fields to define ObjectBox queries.
class TransactionsModel_ {
  /// see [TransactionsModel.id]
  static final id =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[0]);

  /// see [TransactionsModel.tr_user_id]
  static final tr_user_id =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[1]);

  /// see [TransactionsModel.lane_user_id]
  static final lane_user_id =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[2]);

  /// see [TransactionsModel.dane_user_id]
  static final dane_user_id =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[3]);

  /// see [TransactionsModel.amount]
  static final amount =
      QueryStringProperty<TransactionsModel>(_entities[2].properties[4]);

  /// see [TransactionsModel.paymentStatus]
  static final paymentStatus =
      QueryStringProperty<TransactionsModel>(_entities[2].properties[5]);

  /// see [TransactionsModel.confirmation]
  static final confirmation =
      QueryStringProperty<TransactionsModel>(_entities[2].properties[6]);

  /// see [TransactionsModel.createdAt]
  static final createdAt =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[7]);

  /// see [TransactionsModel.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[8]);

  /// see [TransactionsModel.user]
  static final user =
      QueryRelationToOne<TransactionsModel, Users>(_entities[2].properties[9]);

  /// see [TransactionsModel.category]
  static final category =
      QueryRelationToOne<TransactionsModel, CategoriesModel>(
          _entities[2].properties[10]);

  /// see [TransactionsModel.serverId]
  static final serverId =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[11]);

  /// see [TransactionsModel.dueDate]
  static final dueDate =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[12]);

  /// see [TransactionsModel.settleTransactionId]
  static final settleTransactionId =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[13]);

  /// see [TransactionsModel.groupTransaction]
  static final groupTransaction =
      QueryRelationToOne<TransactionsModel, GroupTransaction>(
          _entities[2].properties[14]);
}

/// [UserContactsObjectBoxModel] entity fields to define ObjectBox queries.
class UserContactsObjectBoxModel_ {
  /// see [UserContactsObjectBoxModel.id]
  static final id = QueryIntegerProperty<UserContactsObjectBoxModel>(
      _entities[3].properties[0]);

  /// see [UserContactsObjectBoxModel.contact_user_id]
  static final contact_user_id =
      QueryIntegerProperty<UserContactsObjectBoxModel>(
          _entities[3].properties[1]);

  /// see [UserContactsObjectBoxModel.user_id]
  static final user_id = QueryIntegerProperty<UserContactsObjectBoxModel>(
      _entities[3].properties[2]);

  /// see [UserContactsObjectBoxModel.contact_name]
  static final contact_name = QueryStringProperty<UserContactsObjectBoxModel>(
      _entities[3].properties[3]);

  /// see [UserContactsObjectBoxModel.users]
  static final users = QueryRelationToMany<UserContactsObjectBoxModel, Users>(
      _entities[3].relations[0]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// see [Users.id]
  static final id = QueryIntegerProperty<Users>(_entities[4].properties[0]);

  /// see [Users.onboarded_at]
  static final onboarded_at =
      QueryIntegerProperty<Users>(_entities[4].properties[1]);

  /// see [Users.full_name]
  static final full_name =
      QueryStringProperty<Users>(_entities[4].properties[2]);

  /// see [Users.phone_no]
  static final phone_no =
      QueryStringProperty<Users>(_entities[4].properties[3]);

  /// see [Users.serverId]
  static final serverId =
      QueryIntegerProperty<Users>(_entities[4].properties[4]);

  /// see [Users.onBoardedAt]
  static final onBoardedAt =
      QueryIntegerProperty<Users>(_entities[4].properties[5]);

  /// see [Users.tapCount]
  static final tapCount =
      QueryIntegerProperty<Users>(_entities[4].properties[6]);
}

/// [ActiveUser] entity fields to define ObjectBox queries.
class ActiveUser_ {
  /// see [ActiveUser.id]
  static final id =
      QueryIntegerProperty<ActiveUser>(_entities[5].properties[0]);

  /// see [ActiveUser.lastActivityTime]
  static final lastActivityTime =
      QueryIntegerProperty<ActiveUser>(_entities[5].properties[1]);

  /// see [ActiveUser.user]
  static final user =
      QueryRelationToOne<ActiveUser, Users>(_entities[5].properties[2]);
}

/// [Groups] entity fields to define ObjectBox queries.
class Groups_ {
  /// see [Groups.id]
  static final id = QueryIntegerProperty<Groups>(_entities[6].properties[0]);

  /// see [Groups.serverId]
  static final serverId =
      QueryIntegerProperty<Groups>(_entities[6].properties[1]);

  /// see [Groups.groupName]
  static final groupName =
      QueryStringProperty<Groups>(_entities[6].properties[2]);

  /// see [Groups.groupProfilePic]
  static final groupProfilePic =
      QueryStringProperty<Groups>(_entities[6].properties[3]);

  /// see [Groups.createdAt]
  static final createdAt =
      QueryIntegerProperty<Groups>(_entities[6].properties[4]);

  /// see [Groups.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<Groups>(_entities[6].properties[5]);

  /// see [Groups.participants]
  static final participants =
      QueryRelationToMany<Groups, Users>(_entities[6].relations[0]);
}

/// [GroupTransaction] entity fields to define ObjectBox queries.
class GroupTransaction_ {
  /// see [GroupTransaction.id]
  static final id =
      QueryIntegerProperty<GroupTransaction>(_entities[7].properties[0]);

  /// see [GroupTransaction.serverId]
  static final serverId =
      QueryIntegerProperty<GroupTransaction>(_entities[7].properties[1]);

  /// see [GroupTransaction.amount]
  static final amount =
      QueryIntegerProperty<GroupTransaction>(_entities[7].properties[2]);

  /// see [GroupTransaction.group]
  static final group =
      QueryRelationToOne<GroupTransaction, Groups>(_entities[7].properties[3]);

  /// see [GroupTransaction.createdAt]
  static final createdAt =
      QueryIntegerProperty<GroupTransaction>(_entities[7].properties[4]);

  /// see [GroupTransaction.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<GroupTransaction>(_entities[7].properties[5]);

  /// see [GroupTransaction.creatorId]
  static final creatorId =
      QueryIntegerProperty<GroupTransaction>(_entities[7].properties[6]);

  /// see [GroupTransaction.category]
  static final category = QueryRelationToOne<GroupTransaction, CategoriesModel>(
      _entities[7].properties[7]);

  /// see [GroupTransaction.transactionParticipants]
  static final transactionParticipants =
      QueryRelationToMany<GroupTransaction, Users>(_entities[7].relations[0]);
}

/// [UserGroupEntity] entity fields to define ObjectBox queries.
class UserGroupEntity_ {
  /// see [UserGroupEntity.id]
  static final id =
      QueryIntegerProperty<UserGroupEntity>(_entities[8].properties[0]);

  /// see [UserGroupEntity.entityId]
  static final entityId =
      QueryIntegerProperty<UserGroupEntity>(_entities[8].properties[1]);

  /// see [UserGroupEntity.lastActivityTime]
  static final lastActivityTime =
      QueryIntegerProperty<UserGroupEntity>(_entities[8].properties[2]);

  /// see [UserGroupEntity.profilePicture]
  static final profilePicture =
      QueryStringProperty<UserGroupEntity>(_entities[8].properties[3]);

  /// see [UserGroupEntity.amount]
  static final amount =
      QueryIntegerProperty<UserGroupEntity>(_entities[8].properties[4]);

  /// see [UserGroupEntity.createdAt]
  static final createdAt =
      QueryIntegerProperty<UserGroupEntity>(_entities[8].properties[5]);

  /// see [UserGroupEntity.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<UserGroupEntity>(_entities[8].properties[6]);

  /// see [UserGroupEntity.dbType]
  static final dbType =
      QueryIntegerProperty<UserGroupEntity>(_entities[8].properties[7]);

  /// see [UserGroupEntity.name]
  static final name =
      QueryStringProperty<UserGroupEntity>(_entities[8].properties[8]);
}
